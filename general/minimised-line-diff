#!/usr/bin/env python3

import sys
import difflib
import re

class TextColors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    CLEAR = '\033[0m'


def colored_text(text, color):
    return text
    #return f'{color}{text}{TextColors.CLEAR}'

def escape_ansi(line):
    ansi_escape = re.compile(r'(?:\x1B[@-_]|[\x80-\x9F])[0-?]*[ -/]*[@-~]')
    return ansi_escape.sub('', line)

def filter_large_similar_lines(a, b, context=10):
    seqm = difflib.SequenceMatcher(a=a, b=b)
    reta = []
    retb = []
    for x in seqm.get_opcodes():
        if x[0] == 'equal':
            if x[2] - x[1] > 2*context+5:
                eq_text = a[x[1]:x[1]+context] + ' ... ' + a[x[2]-context:x[2]]
            else:
                eq_text = a[x[1]:x[2]]
            reta.append(eq_text)
            retb.append(eq_text)
        elif x[0] == 'replace':
            reta.append(colored_text(a[x[1]:x[2]], TextColors.YELLOW))
            retb.append(colored_text(b[x[3]:x[4]], TextColors.YELLOW))
        elif x[0] == 'delete':
            reta.append(colored_text(a[x[1]:x[2]], TextColors.RED))
        elif x[0] == 'insert':
            retb.append(colored_text(b[x[3]:x[4]], TextColors.GREEN))
    return ''.join(reta), ''.join(retb)


if __name__ == '__main__':
    with open(sys.argv[1], 'r') as infile:
        first_file_lines = infile.readlines()
    with open(sys.argv[2], 'r') as infile:
        second_file_lines = infile.readlines()
    matches = set()
    befores, afters = [], []
    max_b = 0
    for left, right in zip(first_file_lines, second_file_lines):
        if left == right:
            matches.add(len(befores))
            continue
        # Use a context of 0 for the moment.
        # This is what I want for the current use I wrote this script, will see
        # what I tend to want later.
        b, a = filter_large_similar_lines(left, right, context=0)
        befores.append(b.strip())
        afters.append(a.strip())
        max_b = max(max_b, len(escape_ansi(b)))
    for id, (left, right) in enumerate(zip(befores, afters)):
        #if id in matches:
        #    print(' '*(max_b-3), '......')
        print(f'{left:{max_b}} | {right}')

