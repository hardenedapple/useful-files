# Lines configured by zsh-newuser-install {{{
# If Dumb {{{
# ZLE (the line editor) resets `stty` whenever using it.
# For VSH we don't want that to happen.
# We only really end up in zsh under vsh when over an SSH session, assume that
# if TERM==dumb then this is VSH.
# When that happens drop into bash.
if [[ "$TERM" == "dumb" ]]; then
       exec bash
fi
# }}}

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory extendedglob notify histignoredups
unsetopt beep nomatch
# End of lines configured by zsh-newuser-install }}}
# The following lines were added by compinstall {{{

zstyle ':completion:*' completer _oldlist _expand _complete _ignored _match _correct _prefix
zstyle ':completion:*' completions 1
zstyle ':completion:*' format '%d'
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' '+r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' match-original both
zstyle ':completion:*' max-errors 2 numeric
zstyle ':completion:*' menu select=long-list select=7
zstyle ':completion:*' original false
zstyle ':completion:*' prompt '..%e'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' substitute 1
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle :compinstall filename '$HOME/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall }}}

# Bindings {{{
# map alt-/ to complete files
# only works in xterm if have metaSendsEscape in xresources
zle -C complete-files complete-word _generic
zstyle ':completion:complete-files:*' completer _files

# Both emacs and vi modes now have M-<backspace> for delete /entire/path/name
# and C-w for delete a single part of /a/file/name
ctrl-z-jobs () {
    zle -M "$(jobs)"
}
zle -N ctrl-z-jobs


# Macros for zshell {{{

# # Suggestion by danielsh on freenode channel #zsh
# # Will attempt this way once I've exhausted the current method I have
#
# # I expect that this will fix the 'digit-argument' problem I've been having
# # the man page says that 'digit-argument' finds the digit to use from the last
# # character of the key used to invoke the command, which is why it doesn't
# # work in my start-kbd-macro widget.
#
# zmodload zsh/zleparameter
# typeset -a myrecord
# ${(k)widgets} () {
#     myrecord+=("$WIDGET")
#     zle .$WIDGET
# }

# # Current option:
# #   Wrap every widget in the current keymap.
# #   Store the $KEYS variable for every widget called in a global string
# #   When ending the macro, use bindkey -s "$macro_key" "$recorded_string"
# #   Make sure to unwrap all the functions.

# # If I can also store the keys, and somehow use bindkey, I should be able to
# # bypass the problem with the 'accept-*' widgets
#
# start-kbd-macro () {
#     # iterate over all currently bound widgets, storing them in some variable to
#     # reset everything from, and wrapping them with a function like
#     # ${(k)widgets} () {
#     #     myrecord+="$KEYS"
#     #     zle -w .$WIDGET
#     # }
#     myrecord=""
# }
#
# end-kbd-macro () {
#     # iterate over all stored widgets, resetting them back to their original state.
#     # then somehow have a function that takes a string and converts it into an action
#     # such that the widget behaves like bindkey below
#     # bindkey -s "^Xe" "$myrecord"
#     # Name that widget run-kbd-macro
# }
#
# # Note -- If I didn't mind always having all widgets wrapped, then I could just
# # have start-kbd-macro reset myrecord, and end-kbd-macro store it in this
# # mystical way
#


typeset -a next_macro

end-kbd-macro() {
    # Doesn't actually do anything -- just here for the name
}
zle -N end-kbd-macro

# TODO:
#   capture the number of arguments in digit-argument
#   Make checking for the breaking widgets more robust
#   Save multiple "accept-" widgets in the same macro
#     Look into hook functions (zshmisc SPECIAL FUNCTIONS)
#     Look into recursive-edit zle builtin
#   (possibly) store macros on a ring, and have widgets for cycling 'next macro'
start-kbd-macro() {
    local current_macro
    local string_insert
    typeset -a current_macro
    while
        zle read-command
        [[ $REPLY != "end-kbd-macro" ]] ;do
        zle -w $REPLY
        if [[ $REPLY == "self-insert" ]]; then
            string_insert+="$LBUFFER[-1]"
        elif [[ $REPLY == "undefined-key" ]]; then
            zle -M "Undefined key -- quitting macro"
            current_macro=()
            break
        elif [[ $REPLY == "run-kbd-macro" || $REPLY == "start-kbd-macro" ]]; then
            zle -M "Ignoring macro command -- recursion is not accounted for"
        else
            if [[ -n "$string_insert" ]]; then
                current_macro+=("X$string_insert")
                string_insert=""
            fi
            current_macro+=("$REPLY")
        fi
        if [[ $REPLY == "accept-"* ]]; then
            break
        fi
        zle -R
    done
    if [[ -n "$string_insert" ]]; then
        current_macro+=("X$string_insert")
    fi
    if [[ -n $current_macro ]]; then
        next_macro=($current_macro)
        zle -M "Macro recorded"
    fi
}
zle -N start-kbd-macro

run-kbd-macro() {
    # Currently having a lot of problems with digit arguments
    # Can't use the digit argument to run our macro multiple times, and if the
    # NUMERIC variable is set when running other widgets then they take the
    # argument themselves.
    # For now, remove the argument whenever we're called to stop that last
    # problem.
    NUMERIC=1
    for i in $next_macro; do
        if [[ $i[1] == "X" ]]; then
            LBUFFER+="$i[2,-1]"
            zle -R
        else
            zle $i
        fi
    done
}
zle -N run-kbd-macro

# }}}

# 'viins' map
bindkey -v
# steal a few commands from emacs for insert mode
bindkey '\C-r' history-incremental-search-backward
bindkey '\C-s' history-incremental-search-forward
bindkey '\C-a' beginning-of-line
bindkey '\C-e' end-of-line
bindkey '\C-k' kill-line
bindkey '\C-n' down-line-or-history
bindkey '\C-p' up-line-or-history
bindkey '\C-w' backward-kill-word
bindkey '\e\C-?' vi-backward-kill-word
bindkey '\eq' push-line
bindkey '\eg' get-line
# Have up and down arrows match current line
bindkey '\e[A' history-beginning-search-backward
bindkey '\e[B' history-beginning-search-forward
# These are the keybindings for "Application corsor/keypad mode".
# That mode is toggled in XTerm in the CTRL-MiddleClick menu.
bindkey '\eOA' history-beginning-search-backward
bindkey '\eOB' history-beginning-search-forward
bindkey '\e/' complete-files
bindkey '\C-z' ctrl-z-jobs

# 'emacs' map
bindkey -e
bindkey '\C-x(' start-kbd-macro
bindkey '\C-x)' end-kbd-macro
bindkey '\C-xe' run-kbd-macro
# Have up and down arrows match current line
bindkey '\e[A' history-beginning-search-backward
bindkey '\e[B' history-beginning-search-forward
# These are the keybindings for "Application corsor/keypad mode".
# That mode is toggled in XTerm in the CTRL-MiddleClick menu.
bindkey '\eOA' history-beginning-search-backward
bindkey '\eOB' history-beginning-search-forward
bindkey '\e\C-?' vi-backward-kill-word
# This replaces 'kill-word' on the M-d keybinding because it only kills part of
# a subword e.g. in the middle of the /this/is/a/test word, then kill-word
# removes everything to the end of the word while this widget only kills the
# end part of the last part of the sub-word.
# Features this widget needs are:
# 1) Deletes a "small word", i.e. just one-sublevel in a full path.
# 2) Stores that word in the CUTBUFFER and modifies the killring accordingly.
delete-forward-word () {
  killring=($CUTBUFFER $killring)
  CUTBUFFER=""
  while [[ ${RBUFFER[1]} =~ '[^[:alnum:]]' ]]; do
    CUTBUFFER="${CUTBUFFER}${RBUFFER[1]}"
    zle delete-char
  done
  while [[ ${RBUFFER[1]} =~ '[[:alnum:]]' ]]; do
    CUTBUFFER="${CUTBUFFER}${RBUFFER[1]}"
    zle delete-char
  done
}
zle -N delete-forward-word
bindkey '\ed' delete-forward-word
bindkey '\C-u' backward-kill-line
bindkey '\C-x\C-u' kill-whole-line
bindkey '\e/' complete-files
bindkey '\eM' vi-find-prev-char
bindkey '\em' vi-find-next-char
bindkey '\eW' kill-region
bindkey '\eb' vi-backward-word
bindkey '\ef' vi-forward-word
bindkey '\C-z' ctrl-z-jobs
# }}}

# Prompt set-up{{{
#
setopt promptsubst
autoload -U promptinit
promptinit


case $TERM in
    *xterm*)
        precmd() {
            vcs_info
        }
        ;;
    screen|screen-256color)
        precmd () {
            vcs_info
        }
        ;;
esac


autoload -U colors zsh/terminfo && colors

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git hg
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:git*' formats "%{${fg[blue]}%}[%{${fg[red]}%}%s%{${fg[blue]}%}][%{${fg[green]}%}%b%{${fg[blue]}%}]%{$reset_color%} %{${fg_no_bold[cyan]}%}%u%{$reset_color%}"
zstyle ':vcs_info:hg*' formats "%{${fg[blue]}%}[%{${fg[magenta]}%}%s%{${fg[blue]}%}][%{${fg[green]}%}%b%{${fg[blue]}%}]%{$reset_color%}%{${fg_no_bold[cyan]}%}%u%c%{$reset_color%}"

setprompt() {
  setopt prompt_subst

  # make some aliases for the colours: (could use normal escap.seq's too)
  for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval PR_$color='%{$fg[${(L)color}]%}'
  done
  PR_NO_COLOR="%{$terminfo[sgr0]%}"

  # Check the UID
  if [[ $UID -eq 0 ]]; then # root
    PR_USER_COL="${PR_RED}"
  else
    PR_USER_COL="${PR_CYAN}"
  fi

  PR_USER="${PR_USER_COL}%# ${PR_NO_COLOR}"
  PR_TIME="${PR_BLUE}[${PR_USER_COL}%D{%H:%M:%S}${PR_BLUE}]${PR_NO_COLOR}"

  # Check if we are on SSH or not
  if [[ -n "$SSH_CLIENT" || -n "$SSH2_CLIENT" ]]; then
    PR_HOST="${PR_YELLOW}%M${PR_BLUE}:${PR_NO_COLOR}" #SSH
  fi


  # set the prompt
  WD="${PR_MAGENTA}%c${PR_NO_COLOR}"
  # PROMPT=$'${PR_HOST}${PR_TIME}${WD}${PR_USER}'
  PROMPT=$'${PR_HOST}${WD} ${PR_TIME} ${PR_USER}'
  PS2=$'%_>'
  RPROMPT=$'${vcs_info_msg_0_} ${PR_YELLOW}[%?,%!]${PR_NO_COLOR}'
}

setprompt
# }}}

# {{{ Syntax highlighting for man, cat etc

# {{{ Cat, tail, head, less, and diff syntax highlighting
# Check that highlight is installed first
type highlight > /dev/null 2>&1
if [[ $? -eq 0 ]]; then
  colortail colorhead colorcat() {
    syntax=""
    for file in $@; do
      if [ -f $file ]; then
        case $file in
          *.lisp) syntax="lisp";;
          *.el) syntax="lisp";;
          *.hs) syntax="haskell";;
          *.asd) syntax="lisp";;
          *.java) syntax="java";;
          *.php) syntax="php";;
          *.py) syntax="python";;
          *.diff) syntax="diff";;
          *.rej) syntax="diff";;
          *.awk) syntax="awk";;
          *.c) syntax="c";;
          *.h) syntax="c";;
          *.cpp) syntax="cpp";;
          *.ino) syntax="cpp";;
          *.pde) syntax="cpp";;
          *.css) syntax="css";;
          *.js) syntax="js";;
          *.jsp) syntax="jsp";;
          *.xml) syntax="xml";;
          *.sql) syntax="sql";;
          *.pl) syntax="pl";;
          *.rb) syntax="rb";;
          *.html) syntax="html";;
          *.sh) syntax="sh";;
          *.patch) syntax="patch";;
          /etc/apache*/*) syntax="httpd";;
        esac
      fi
    done

    if [[ $syntax != "" ]]; then
      command ${0#color} $@ | highlight --validate-input -O ansi --syntax=$syntax
    else
      command ${0#color} $@
    fi
  }

  colorless() {
    LESSOPEN='|highlight --validate-input --force -O ansi %s 2>/dev/null' less $@
  }

  colordiff() {
    command diff $@ | highlight -O ansi --syntax=diff
  }
fi
# }}}

# }}}

# Remove C-s and C-q {{{
# Can have problems in Rtorrent with these commands, run this if needs be
stty -ixon
stty -ixoff
# }}}

# Alias's  {{{
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$( dircolors -b ~/.dircolors )" || eval "$( dircolors -b )"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
fi
alias gdb='gdb -q'
alias ll='ls -F'
alias gr='cd $(git root)'
alias gitn='git --no-pager'
alias hr='cd $(hg root)'
alias nm='nm -f sysv'
if [[ -f "$HOME/bin/neovim/bin/nvim" ]] && [[ -x "$HOME/bin/neovim/bin/nvim" ]]; then
	alias vim='~/bin/neovim/bin/nvim'
fi

GIT_COMMANDS=(add am annotate apply archimport archive bisect blame branch bundle cat-file check-attr check-ignore check-mailmap check-ref-format checkout checkout-index cherry cherry-pick citool clean clone column commit commit-tree config count-objects credential credential-cache credential-cache--daemon credential-store cvsexportcommit cvsimport cvsserver daemon describe diff diff-files diff-index diff-tree difftool ex fast-export fast-import fetch fetch-pack filter-branch fmt-merge-msg for-each-ref format-patch fsck fsck-objects gc get-tar-commit-id graph grep gui hash-object help http-backend http-fetch http-push imap-send index-pack init init-db instaweb log ls-files ls-remote ls-tree mailinfo mailsplit merge merge-base merge-file merge-index merge-one-file merge-tree mergetool mergetool--lib mktag mktree mv name-rev notes p4 pack-objects pack-redundant pack-refs parse-remote patch-id prune prune-packed pull push quiltimport read-tree rebase receive-pack reflog relink remote remote-ext remote-fd remote-testgit repack replace request-pull rerere reset rev-list rev-parse revert root rm send-email send-pack sh-i18n sh-i18n--envsubst sh-setup shell shortlog show show-branch show-index show-ref stage stash stat status stripspace submodule subtree svn symbolic-ref tag unpack-file unpack-objects update-index update-ref update-server-info upload-archive upload-pack var verify-commit verify-pack verify-tag web--browse whatchanged write-tree)
giti() {
    for command in "${GIT_COMMANDS[@]}"
    do
        alias $command="git $command"
    done
}


ungiti() {
    for command in "${GIT_COMMANDS[@]}"
    do
        unalias $command
    done
}

# }}}

# General {{{
setopt interactivecomments
setopt rm_star_silent
ulimit -c unlimited
# }}}

# {{{ Functions
newdir () {
  mkdir -p "$@"
  cd "${@: -1}"
}
# }}}

# Passwords {{{

PASSDIR=~/.config/passwords

pw() {
  cd "$PASSDIR"
    if [[ ! -z "$1" ]]; then
      command vim ~/.config/passwords/passwords.gpg -c "/\\c$1/"
    else
      echo "Usage: pw [search string]"
    fi
  cd "$OLDPWD"
}
# }}}

# If Dumb {{{
if [[ "$TERM" == "dumb" ]]
then
       # unsetopt zle
       zstyle ':completion:*' list-prompt
       unsetopt prompt_cr
       unsetopt prompt_subst
       PS1='%% '
fi
# }}}

# vim: set ts=2 sw=2 foldmethod=marker:
