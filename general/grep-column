#!/usr/bin/env python

from argparse import ArgumentParser
import re
import sys
import logging
import functools as ft

def find_column_number(title, line, sep):
    columns = line.split(sep)
    try:
        return columns.index(title)
    except ValueError:
        for i, v in enumerate(columns):
            if re.match(title, v):
                return i
    return None

# Decisions:
# 1) Which regexps should be re.match, which should be re.search?
#    Currently going with:
#    - column-title    assumed exact, if no match uses re.match
#    - extra-prints    re.search (not sure I like this).
#    - pattern         re.search
#    - header-pattern  re.search

if __name__ == '__main__':
    desc = '\n'.join([
        'Print lines whose Nth column matches a given pattern.',
        'Can specify which column to search either by specifying the column',
        'name or the column number.'
    ])
    parser = ArgumentParser('grep-column', description=desc)
    parser.add_argument('--column-num', help='Index of the column to search.',
                        type=int, default=None)
    parser.add_argument('--column-title', help=' '.join([
        'Title of the column to search.',
        'Used if --column-num is not specified.']))
    desc = 'Regexp found in lines that should always be printed'
    parser.add_argument('--extra-prints', help=desc)
    desc = ' '.join([
        'Regexp to identify the header pattern.',
        'Only relevant when using --column-title.',
        'First line seen with this pattern in it is considered the header.',
        'If not specified then --column-title is used as the regexp to',
        'identify the header.'])
    parser.add_argument('--header-pattern', help=desc)
    parser.add_argument('--column-separator',
                        help='String to split lines into columns by.',
                        default=None)
    desc = ' '.join([
        'Pattern to search for in specified column.',
        'When this pattetrn found in specified column, print entire line.'])
    parser.add_argument('pattern', help=desc)
    parser.add_argument('-v', '--invert-match',
                        action='store_true',
                        help='Invert which lines to print.')
    args = parser.parse_args()
    if args.column_title is None and args.column_num is None:
        print('Require either column title or column number.', file=sys.stderr)
        sys.exit(0)

    if args.column_title:
        header_pattern = (args.header_pattern if args.header_pattern
                          else args.column_title)

    if args.column_num is None:
        for line in sys.stdin:
            if re.search(header_pattern, line):
                args.column_num = find_column_number(args.column_title, line,
                                                     args.column_separator)
                print(line, end='')
                break
            elif args.extra_prints and re.search(args.extra_prints, line):
                print(line, end='')
    if args.column_num is None:
        print('Given column title not found in table header, exiting',
              file=sys.stderr)

    # Remainder now we have the column number etc.
    for line in sys.stdin:
        columns = line.split(args.column_separator)
        try:
            column_entry = columns[args.column_num]
        except:
            continue
        matches = re.search(args.pattern, column_entry)
        if not args.invert_match and matches:
            print(line, end='')
        elif args.invert_match and not matches:
            print(line, end='')
        elif args.extra_prints and re.search(args.extra_prints, line):
            print(line, end='')
