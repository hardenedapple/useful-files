#!/bin/bash

# Test whether any unusual programs are running.
# I store the output of pstree(1) under conditions where I know it's safe to
# turn the computer off.
# In this script I check against these previously stored states one at a time,
# and if the machine is currently in one of those states, I turn the machine
# off.
# This avoids the problem of powering off my machine while I've minimised a
# terminal running vim, or while there's some strange daemon running in the
# background.
#
# The specific set of programs running that I'm happy to shutdown without
# stopping will change depending on the machine I'm running.
# For that reason (and privicy reasons, I've not added in true pstree(1) output
# in this file).


declare -A stored_values
stored_values=(
    [0]='output option 1'
    [1]='output option 2'
    [2]='output option 3'
    )
current=$(pstree)

for setup in "${stored_values[@]}";
do
    difference=$(diff   <(echo -ne "${setup}") \
                        <(echo "${current}"))
    if [[ "$difference" == "" ]]; then
        sudo poweroff
    fi
done

echo 'Programs currently running: '
echo "$difference"

echo -e "\n${current}" >> ~/pstree_output
echo 'The current file is stored in ~/pstree_output'


# Command to change pstree(1) output into the format paste the pstree output at
# the end of this file, and use the command below:
# vimcmd: /^systemd/mark s | 's,$ s/\([^#].*\)$/\1\\n/ | 's,$ join! | m?^\v\s*\[\d+\]\='systemd? | s/\v(^|$)/'/g | normal 0kyf=jP0
# vimcmd: /^systemd/mark s | 's,$ s/\([^#].*\)$/\1\\n/ | 's,$ join! | m?^\v\s*\[\d+\]\='systemd? | s/\v(^|$)/'/g | -1s/^\v(\s*\[)(\d+)(\]\=)'systemd.*\n\zs\ze'systemd/\=submatch(1) . (submatch(2) + 1) . submatch(3)
# To change back:
# vimcmd: /^\w*='systemd/s/^\w*='// | s/'$// | s/\\n/\r/g

