#
# ~/.bashrc
#

# If not running interactively, don't do anything
[ -z "$PS1" ] && return


# Stop less saving my search commands
export LESSHISTFILE="/dev/null"

# # {{{ Command Prompt

# Cant get this to work with the right aligned status indicator.

 setprompt () {
   if [[ "$TERM" == "dumb" ]]
   then
     local PR_RED=
     local PR_GREEN=
     local PR_YELLOW=
     local PR_BLUE=
     local PR_MAGENTA=
     local PR_CYAN=
     local PR_NO_COLOR=
     local PR_USER_COL=
   else
     local PR_RED="\[\e[0;31m\]"
     local PR_GREEN="\[\e[0;32m\]"
     local PR_YELLOW="\[\e[0;33m\]"
     local PR_BLUE="\[\e[0;34m\]"
     local PR_MAGENTA="\[\e[0;35m\]"
     local PR_CYAN="\[\e[0;36m\]"
     local PR_NO_COLOR="\[\e[0m\]"
     if [[ $( id -u ) -eq 0 ]]; then
       local PR_USER_COL="${PR_RED}"
     else
       local PR_USER_COL="${PR_CYAN}"
     fi
   fi

   local PR_USER="${PR_USER_COL}\$ ${PR_NO_COLOR}"
   local PR_TIME="${PR_BLUE}[${PR_USER_COL}\D{%H:%M:%S}${PR_BLUE}]${PR_NO_COLOR}"

   if [[ -n "$SSH_CLIENT" || -n "$SSH2_CLIENT" ]]; then
     local PR_HOST="${PR_YELLOW}\h${PR_BLUE}:${PR_NO_COLOR}"
   fi
   local PR_DIR="${PR_MAGENTA}\W${PR_NO_COLOR}"
   # PS1='$(printf "%*s\r%s" $(( COLUMNS - 1 )) "[$?,\!]" "${PR_DIR} $(PR_TIME} ${PR_USER}"'
   local FRONT_PR="${PR_HOST}${PR_DIR} ${PR_TIME} ${PR_USER}"
   PS1="${FRONT_PR}"
   # local REAR_PR="[$?,\!]"
   # PS1='$(printf "%*s\r%s" $(( COLUMNS - 1 )) "${REAR_PR}" "${FRONT_PR}")'

}
setprompt

# }}}

# Default editor vim, but leave editing mode as emacs
if [[ $TERM != 'dumb' ]]; then
  export EDITOR=vim
fi

# add $HOME/bin to $PATH
if [ -d "$HOME/bin" ]; then
    PATH="$PATH:$HOME/bin"
fi
if [ -d "$HOME/.gem/ruby/2.0.0/bin" ]; then
    PATH="$PATH:$HOME/.gem/ruby/2.0.0/bin"
fi

# Remove C-s and C-q (allows quite a lot of stuff) {{{
stty -ixon
stty -ixoff
# }}}

# # {{{ Syntax highlighting for man, cat etc

# {{{ Cat, sed, awk, tail, diff syntax highlighting
# Cat tail, sed, awk, and head
# Check that highlight is installed
type highlight > /dev/null 2>&1
if [[ $? -eq 0 ]]; then
  colored_command() {
    syntax=""
    for file in $@; do
      if [ -f $file ]; then
        case $file in
          *.lisp) syntax="lisp";;
          *.el) syntax="lisp";;
          *.hs) syntax="haskell";;
          *.asd) syntax="lisp";;
          *.java) syntax="java";;
          *.php) syntax="php";;
          *.py) syntax="python";;
          *.diff) syntax="diff";;
          *.rej) syntax="diff";;
          *.awk) syntax="awk";;
          *.c) syntax="c";;
          *.cpp) syntax="cpp";;
          *.ino) syntax="cpp";;
          *.pde) syntax="cpp";;
          *.css) syntax="css";;
          *.js) syntax="js";;
          *.jsp) syntax="jsp";;
          *.xml) syntax="xml";;
          *.sql) syntax="sql";;
          *.pl) syntax="pl";;
          *.rb) syntax="rb";;
          *.html) syntax="html";;
          *.sh) syntax="sh";;
          /etc/apache*/*) syntax="httpd";;
        esac
      fi
    done

    if [[ $syntax != "" ]]; then
      command $@ | highlight -O ansi --syntax=$syntax
    else
      command $@
    fi
  }

  colorcat () {
      colored_command cat $@
  }

  colorhead () {
      colored_command head $@
  }

  colortail () {
      colored_command tail $@
  }


  # diff (always want the same highlighting)
  colordiff() {
    command diff $@ | highlight -O ansi --syntax=diff
  }

fi

# }}}

# {{{ Man page colors

# This adds colors to ALL less instances, might be annoying in some cases.
export LESS_TERMCAP_mb=$(printf "\e[1;31m") \
export LESS_TERMCAP_md=$(printf "\e[1;31m") \
export LESS_TERMCAP_me=$(printf "\e[0m") \
export LESS_TERMCAP_se=$(printf "\e[0m") \
export LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
export LESS_TERMCAP_ue=$(printf "\e[0m") \
export LESS_TERMCAP_us=$(printf "\e[1;32m")

export MANSECT=1:8:5:7:2:0:3:4:6

# }}}
# }}}

# Alias's  {{{
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$( dircolors -b ~/.dircolors )" || eval "$( dircolors -b )"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
fi
alias gdb='gdb -q'
alias ll='ls -F'
alias gr='cd $(git root)'
alias hr='cd $(hg root)'

# }}}

# General {{{
export HISTCONTROL=ignoreboth

ulimit -c unlimited
shopt -s checkwinsize
shopt -s dirspell
shopt -s extglob
shopt -s globstar
shopt -s histappend
shopt -s histreedit
# }}}

# Passwords {{{

PASSDIR=~/.config/passwords

pw() {
  cd "$PASSDIR"
    if [[ ! -z "$1" ]]; then
      command vim ~/.config/passwords/passwords.gpg -c "/\\c$1/"
    else
      echo "Usage: pw [search string]"
    fi
  cd "$OLDPWD"
}
# }}}

# {{{ Functions
newdir () {
  mkdir -p "$@"
  cd "${@: -1}"
}
# }}}

# {{{ Completion
# TODO:
#     Add something to check if bash-completion has already been loaded
enable_completion () {
    local FOUND_BC=0
    for file in "/usr/share/bash-completion/bash_completion" "/etc/bash_completion"
    do
        if [ -f $file ]
        then
            . $file
            FOUND_BC=1
        fi
    done
    if [[ $FOUND_BC -ne 1 ]];
    then
        # Add bash complete when using sudo
        complete -cf sudo
        complete -cf man
    fi
}

enable_completion
# }}}

# {{{ Other
export LESS='-SR -j 5'
if [[ "$TERM" == "dumb" ]]
then
  # Usually I would want these variables set to col -b to remove wierd
  # linefeeds and backspaces (I think -- I haven't used a `dumb` terminal very
  # much, and hence haven't encountered many cases where this matters).
  # If I'm running in vsh, then I've already set them to 'col -b | cat', which
  # does the same but buffers the output so it doesn't make nvim slow.
  if [[ -z "$PAGER" ]]; then
    export PAGER='col -b'
  fi
  if [[ -z "$MANPAGER" ]]; then
    export MANPAGER='col -b'
  fi
  # Do the equivalent as above but for git, because git doesn't use the PAGER
  # environment variable.
  if [[ -z "$GIT_PAGER" ]]; then
    export GIT_PAGER='col -b'
  fi
fi
# }}}

# vim: set ts=2 sw=2 foldmethod=marker:
